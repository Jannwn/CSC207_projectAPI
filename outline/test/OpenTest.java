import javax.swing.*;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.Objects;

import static java.lang.Thread.sleep;
import static org.junit.Assert.*;

import app.Main;
import data_access.FileUserDataAccessObject;
import entity.CommonNoteFactory;
import entity.NoteFactory;
import interface_adapter.OpenNote_adapter.OpenNotePresenter;
import org.junit.Test;
import use_case.OpenNote_case.OpenNoteInputBoundary;
import interface_adapter.OpenNote_adapter.OpenNoteController;
import interface_adapter.OpenNote_adapter.OpenNoteViewModel;
import use_case.OpenNote_case.OpenNoteInteractor;
import use_case.OpenNote_case.OpenNoteUserDataAccessInterface;
import view.OpenNoteView;
import use_case.OpenNote_case.OpenNoteInteractor;

// create the UI
public class OpenTest {

    @org.junit.Test
    public void testOpenView() {
        OpenNoteInputBoundary onib = null;
        OpenNoteController controller = new OpenNoteController(onib);
        OpenNoteViewModel viewModel = new OpenNoteViewModel();
//        JPanel openNoteView = new OpenNoteView(viewModel, controller);
//        JFrame jf = new JFrame();
//        jf.setContentPane(openNoteView);
//        jf.pack();
//        jf.setVisible(true);
    }

    // Test if Main runs properly
    @Test
    public void testMainRuns() {
        Main.main(new String[]{});}


    public void addNote() {
        NoteFactory noteFactory = new CommonNoteFactory();
        FileUserDataAccessObject fileUserDataAccessObject;
        try {
            fileUserDataAccessObject = new FileUserDataAccessObject("./users.csv", noteFactory);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        fileUserDataAccessObject.saveNote(noteFactory.create("note1", "./users.csv/note1", ""));
    }

    @Test
    public void testContent() throws IOException {
        addNote();
        NoteFactory noteFactory = new CommonNoteFactory();
        FileUserDataAccessObject fileUserDataAccessObject = new FileUserDataAccessObject("./users.csv", noteFactory);

        assertEquals(noteFactory.fetchText("note1", "./users.csv").getContent(), "");
        assertNotEquals(noteFactory.fetchText("note1","./users.csv" ).getContent(), "new");

    }

    @Test
    public void testName() throws IOException {
        addNote();
        NoteFactory noteFactory = new CommonNoteFactory();
        FileUserDataAccessObject fileUserDataAccessObject = new FileUserDataAccessObject("./users.csv", noteFactory);

        assertEquals(noteFactory.fetchText("note1", "./users.csv").getNoteName(), "note1");
        assertNotEquals("note2", noteFactory.fetchText("note1", "./users.csv").getNoteName());

    }

    @Test
    public void testPath() throws IOException {
        addNote();
        NoteFactory noteFactory = new CommonNoteFactory();
        FileUserDataAccessObject fileUserDataAccessObject = new FileUserDataAccessObject("./users.csv", noteFactory);

        assertEquals(noteFactory.fetchText("note1", "./users.csv").getNotePath(), "./users.csv");
        assertNotEquals(noteFactory.fetchText("note1", "./users.csv").getNotePath(), "./other.csv");

        noteFactory.create("note2", "./users.csv", "new");
        assertNotEquals(noteFactory.fetchText("note2", "./users.csv"), noteFactory.fetchText("note1", "./users.csv"));
    }

    @Test
    public void testNameAlreadyExists() throws IOException {
        addNote();
        NoteFactory noteFactory = new CommonNoteFactory();

        //try {
        noteFactory.create("note1", "./users.csv", "new");
        //}
        // catch (IOException e) {
        //    throw new RuntimeException(e);
        //}
    }
}

